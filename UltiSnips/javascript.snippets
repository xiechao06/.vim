snippet define
define(['jquery', $1], function ($, $2) {
	
});
endsnippet 

snippet bb:view
var $1 = Backbone.View.extend({
	render: function () {
		$2
		return this;
	}
});
endsnippet 

snippet vr
var $1 = require('${2:$1}')$3;
endsnippet

snippet r
require($1);
endsnippet

snippet	swal "swal compact mode"
swal({
	type: '$1',
	title: '$2',
	text: '$3'
});
endsnippet

snippet	swal "swal full mode"
swal({
	type: '$1',
	title: '$2',
	text: '$3'
	showCancelButton: true,
}, function (confirmed) {
	$4
});
endsnippet

snippet	f 
function ($1) {
	$2
}
endsnippet

snippet ajax "send json compact mode"
$.ajax({
	url: '$1',
	type: '${2:POST}',
	data: JSON.stringify($3),
	contentType: 'application/json; charset=UTF-8',
	dataType: 'json',  // if the format of response should be json
}).done(function (data, textStatus, jqXHR) {
	$4
});
endsnippet

snippet ajax "send json fully mode"
$.ajax({
	url: '$1',
	type: '${2:POST}',
	data: JSON.stringify($3),
	contentType: 'application/json; charset=UTF-8',
	dataType: 'json',  // if the format of response should be json
}).done(function (data, textStatus, jqXHR) {
	$4
}).fail(function (jqXHR, textStatus, errorThrown) {
	$5
}).always(function () {
	$6
});
endsnippet


snippet f* "generator"
function *($1) {
	$2	
}
endsnippet

snippet v "define varialble" b
var $1 = ${2:null};
endsnippet

snippet export "module exports" b
module.exports = $1;
endsnippet

snippet script "a script skeleton" b
#! /usr/bin/env node
var __doc__ = \`
	${1:beautiful help}
\`

if (require.main === module) {

	var myArgs = require('optimist').args;

	if ((myArgs.h)||(myArgs.help)) {
		console.log(__doc__);
		process.exit(1);
	}
	
	$2
}
endsnippet

snippet eslint 
/* eslint-disable ${1:max-len} */
/* eslint-enable $1 */
endsnippet
